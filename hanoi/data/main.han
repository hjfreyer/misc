
mod csv {

    let quoted = {};

    let parser = {
        bind caller;
        bind iter;
        bind next;
        caller next #curry iter #curry @exec;

        match (1) {
            @eos => {
                bind eos;
                bind caller;
                @end caller #curry @exec ^eos
            }
            @yield => {
                bind iternext;
                bind char;
                bind yld;
                bind caller;

                match (2) {
                    ',' => {
                        bind next;
                        iternext next #curry 
                            @nextfield caller #curry #curry @exec ^yld ^char;
                        bind caller;
                        bind iternext;
                        caller iternext this.parser #curry #curry @exec
                    }

                    '\n' => {
                        bind next; 
                            iternext next #curry 
                                @nextrow caller #curry #curry @exec ^yld ^char;
                        bind caller;
                        bind iternext;
                            caller iternext this.parser #curry #curry @exec
                    }
                } else {
                    bind next;
                        iternext next #curry char @fieldchar caller #curry #curry #curry @exec ^yld;
                    bind caller;
                    bind iternext;
                        caller iternext this.parser #curry #curry @exec

                }
            }
        } else {
            @panic
        }

    };
}

mod tests {
    let enumerate = {
        bind caller;
        bind next;
            next @assert_true @yield caller #curry #curry #curry @exec; 
        bind caller;
        bind next;
            next @symbol_iter @yield caller #curry #curry #curry @exec;
        bind caller;
        bind next;
            next @basic_csv @yield caller #curry #curry #curry @exec;
        bind caller;
        bind next;
            next @manually_drive_map @yield caller #curry #curry #curry @exec;
        bind caller;
            @eos caller #curry @exec
    };

    mod cases {
        let assert_true = {
            bind caller;
                @pass caller #curry @exec
        };

        let basic_csv = {
            bind caller;
            bind next;
                caller next #curry
                @"h,e\n" 0 this.super.super.iter.symbol_chars #curry #curry
                    this.super.super.csv.parser #curry #curry @exec;
            bind cont;
            bind char;
            bind tag;
            bind caller;
            bind next;
                tag @fieldchar #assert_eq char 'h' #assert_eq caller next #curry cont #curry @exec;
            bind cont;
            bind tag;
            bind caller;
            bind next;
                tag @nextfield #assert_eq caller next #curry cont #curry @exec;
            bind cont;
            bind char;
            bind tag;
            bind caller;
            bind next;
                tag @fieldchar #assert_eq char 'e' #assert_eq caller next #curry cont #curry @exec;
            bind cont;
            bind tag;
            bind caller;
            bind next;
                tag @nextrow #assert_eq caller next #curry cont #curry @exec;
            bind tag;
            bind caller;
                tag @end #assert_eq
                @pass caller #curry @exec
        };

        let symbol_iter = {
            bind caller;
            bind next;
                caller next #curry @"foo" 0 this.super.super.iter.symbol_chars #curry #curry #curry @exec;
            bind cont;
            bind char;
            bind tag;
            bind caller;
            bind next;
                tag @yield #assert_eq char 'f' #assert_eq caller next #curry cont #curry @exec;
            bind cont;
            bind char;
            bind tag;
            bind caller;
            bind next;
                tag @yield #assert_eq char 'o' #assert_eq caller next #curry cont #curry @exec;
            bind cont;
            bind char;
            bind tag;
            bind caller;
            bind next;
                tag @yield #assert_eq char 'o' #assert_eq caller next #curry cont #curry @exec;
            bind tag;
            bind caller;
                tag @eos #assert_eq
                @pass caller #curry @exec
        };

        let manually_drive_map = {
            bind caller;
            bind next;
                caller next #curry this.super.super.iter.map #curry @exec;
            bind cont;
            bind iter;
            bind req;
            bind caller;
            bind next;
                req @request #assert_eq iter @iter #assert_eq
                caller next #curry 1 @yield cont #curry #curry #curry @exec;
            bind cont;
            bind one;
            bind fn;
            bind req;
            bind caller;
            bind next;
                req @request #assert_eq fn @fn #assert_eq one 1 #assert_eq
                caller next #curry 2 cont #curry #curry @exec;
            bind cont;
            bind two;
            bind yld;
            bind caller;
            bind next;
                yld @yield #assert_eq two 2 #assert_eq
                caller next #curry cont #curry @exec;
            bind cont;
            bind iter;
            bind req;
            bind caller;
            bind next;
                req @request #assert_eq iter @iter #assert_eq
                caller next #curry @eos cont #curry #curry @exec;
            bind eos;
            bind caller;
                eos @eos #assert_eq @pass caller #curry @exec
        };
    }

    let run = {
        bind caller;
        bind case;
            caller case this.cases #get #curry @exec 
    };
}

mod iter {
    let symbol_len = {
        bind caller;
        bind symbol;
            symbol #symbol_len caller #curry @exec
    };

    let symbol_char_at = {
        bind caller;
        bind symbol;
        bind offset;
            symbol offset #symbol_char_at caller #curry @exec
    };

    let eq = {
        bind caller;
        bind a;
        bind b;
        a b #eq caller #curry @exec
    };

    let add = {
        bind caller;
        bind a;
        bind b;
            a b #add caller #curry @exec
    };

    proc symbol_chars_inner(offset, symbol, caller) {
        let (len) = this.symbol_len(*symbol);
        let (are_eq) = this.eq(*offset, *len);
        if are_eq {
            caller(@eos)
        } else {
            let (char) = this.symbol_char_at(*offset, *symbol);
            let (caller) = caller(@yield, char);
            let (next_offset) = this.add(offset, 1);
            this.symbol_chars_inner(next_offset, symbol, caller)
        }
    }

    proc symbol_chars(offset, symbol, caller) {
        this.symbol_chars_inner(0, symbol, caller)
    }

    proc map(caller) {
        match caller(@request, @iter) {
            (@eos, caller) => {
                caller(@eos)
            }
            (@yield, item, caller) => {
                let (applied, caller) = caller(@request, @fn, item);
                let (caller) = caller(@yield, applied);
                this.map(caller)
            }
        }
    }
}

let main = {
    this.tests.cases.symbol_iter #curry @exec;
    @halt
};