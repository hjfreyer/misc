WHITESPACE = _{ " " | "\n" }

COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }

builtin = { "#" ~ identifier }

this = { "this" }

keyword = _{ "if" | this }

bool = { "true" | "false" }

int = @{ ASCII_DIGIT+ }

char_lit = ${ "'" ~ lit_char ~ "'" }
    lit_char = @{
        !("'" | "\\") ~ ANY
        | "\\" ~ ("'" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
        | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
    }

identifier   = @{ !keyword ~ id_non_digit ~ (id_non_digit | ASCII_DIGIT)* }
id_non_digit = _{ ASCII_ALPHA | "_" }

func_call = { "#" ~ identifier ~ "(" ~ int ~ ")" }

symbol = { "@" ~ ( identifier | string ) }

string = ${ "\"" ~ str_inner ~ "\"" }
    str_inner = @{ str_char* }
    str_char = {
        !("\"" | "\\") ~ ANY
        | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
        | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
    }

literal = { bool | int | char_lit }

expr = { literal | func_call | identifier | builtin | this | symbol }

sentence = { expr* }

and_then = { sentence ~ ";" ~ code }

if_statement = { sentence ~ "if" ~ "{" ~ code ~ "}" ~ "else" ~ "{" ~ code ~ "}" }

code = { and_then | if_statement | sentence }

code_decl = { "let" ~ identifier ~ "=" ~ "{" ~ code ~ "}" ~ ";" }

ns_decl = { "mod" ~ identifier ~ "{" ~ namespace ~ "}" }

decl = _{ code_decl | ns_decl }

namespace = { decl* }

file = { SOI ~ namespace ~ EOI }
